grammar org.xtext.example.rdfdsl.RdfDsl with org.eclipse.xtext.common.Terminals

generate rdfDsl "http://www.xtext.org/example/rdfdsl/RdfDsl"

//#################################################[GENERAL]#################################################
Root:
	(model=Model)? (data=Data)? (query=Query)? (cypherQuery=CypherQueries)?;

Link:
	URL;

URL:
	STRING;

//***CypherQuery****
CypherQueries:
	'CypherQuery' names+=QueryName+;

QueryName:
	name=ID namespace=STRING query=CypherQuery;

CypherQuery:
	match+=Match+ where+=CypherWhere+ return=Return;

Match:
	'MATCH' from=Node (fromSeperator=Seperator relation=CypherRelation toSeperator=Seperator to=Node)?;

Seperator:
	'-' | '->';

CypherRelation:
	'[:' id=ID ']';

Negation:
	'NOT';

CypherWhere:
	'WHERE' (negation=Negation)? identifier=ID '.' property=ID '=' string=STRING;

DOUBLE:
	INT '.' INT;

CypherType:
	{CypherInt} value=INT | {CypherString} value=STRING
	| {CypherBool} value=BOOL | {CypherDouble} value=DOUBLE;

Pattern:
	property=ID ':' value=CypherType;

Node:
	'(' identifier=ID (':' type=ID ('{' pattern+=Pattern (',' pattern+=Pattern)* '}')?)?')';

Return:
	'RETURN' ids+=ID (',' ids+=ID)* (';')?;

//##################################################[MODEL]##################################################
Model:
	'model' namespaces+=Namespace+;

Namespace:
	'namespace' name=ID link=Link (classes+=Class)*;

Class returns _Class:
	'class' name=ID (':' superClass=ID)? (properties+=Property)*;

Property returns _Property:
	'property' name=ID type=(ObjectType | SimpleType) (cardinality=Cardinality)?; // default card is 0..*

ObjectType returns Type:
	{ClassRef} id=ID;

SimpleType returns Type:
	{_String} 'String' | {_Integer} 'Integer' | {_Float} 'Float' | {_Boolean} 'Boolean';

Cardinality:
	'cardinality' min=INT '..' max=Entries;

Entries:
	INT | '*';

//##################################################[DATA]##################################################
Data:
	'data' namespaces+=DataNamespace+;

DataNamespace:
	'namespace' name=ID link=Link (from=From)? (bindings+=Binding)* (propBind+=PropertyBinding)+;

From:
	'from' importedNs=Link '[' listProp+=ID+ (',' listProp+=ID)*']';

Binding:
	varList+=ID (',' varList+=ID)* 'is' entity=ID;

PropertyBinding:
	name=ID ':' property+=DataProperty+;

DataProperty:
	prop=ID ((value+=ID (',' value+=ID)*) | sValue=SimpleValue) // TODO: skal nok laves lidt bedre
;

SimpleValue:
	INT | STRING | BOOL;

BOOL:
	'True' | 'False';

//##################################################[Query]##################################################
Query:
	'query' namespaces+=QueryNamespace+ instances+=QueryInstance+;

QueryNamespace:
	'from' id=ID url=STRING;

QueryInstance:
	id=ID (params+=ID)* select=Select;

Select:
	'SELECT' selectList+=ID (',' selectList+=ID)* where=Where;

Where:
	'WHERE' constraintList+=Triple+;

Triple:
	subject=ID predicate=Predicate object=QueryObject;

Predicate:
	namespace=ID ':' property=ID;

QueryObject:
	{QueryID} id=ID | {QueryLiteral} id=STRING | {QueryBool} id=BOOL;
